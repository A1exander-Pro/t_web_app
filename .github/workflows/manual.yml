
  
name: mysite CI workflow

on: [push]

jobs:

  copy_configs:
      runs-on: ubuntu-latest
      steps:
       - name: Check out the repo
         uses: actions/checkout@v2
       - name: copy start files via ssh password
         uses: appleboy/scp-action@master
         with:
            host: ${{ secrets.SSH_HOST }}
            username: ${{ secrets.SSH_USER  }}
#             passphrase: ${{ secrets.SSH_PASSPHRASE  }}
            password: ${{ secrets.PASSWORD }}
            source: "docker-compose.yml, nginx_prod/default.conf"
            target: "~/"
            overwrite: true

  build_and_push_to_docker_hub:
      name: Push Docker image to Docker Hub
      runs-on: ubuntu-latest
      needs: copy_configs
      if: github.ref == 'refs/heads/master'
      steps:
        - name: Check out the repo
          uses: actions/checkout@v2
        - name: Set up Docker Buildx
          uses: docker/setup-buildx-action@v1
        - name: Login to Docker
          uses: docker/login-action@v1
          with:
            username: ${{ secrets.DOCKER_USERNAME }}
            password: ${{ secrets.DOCKER_PASSWORD }}
        - name: Push to Docker Hub
          uses: docker/build-push-action@v2
          with:
            no-cache: true
            context: ./
            file: ./Dockerfile
            push: true
            tags: alexanderpronikov/t_web_app:latest


  deploy:
    runs-on: ubuntu-latest
    needs: build_and_push_to_docker_hub
    steps:
      - name: executing remote ssh commands to deploy
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
#           passphrase: ${{ secrets.SSH_PASSPHRASE  }}
          username: ${{ secrets.SSH_USER }}
          password: ${{ secrets.PASSWORD }}
          script: |
            echo DEBUG=False > .env
            echo DB_ENGINE=${{ secrets.DB_ENGINE }} >> .env
            echo DB_NAME=${{ secrets.DB_NAME }}  >> .env
            echo POSTGRES_USER=${{ secrets.POSTGRES_USER }}  >> .env
            echo POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }} >> .env
            echo DB_HOST=${{ secrets.DB_HOST }} >> .env
            echo DB_PORT=${{ secrets.DB_PORT }} >> .env
            echo ALLOWED_HOSTS=${{ secrets.ALLOWED_HOSTS }} >> .env
            echo DJANGO_SECRET_KEY=${{ secrets.DJANGO_SECRET_KEY }} >> .env
            echo PRODUCTION=${{ secrets.PRODUCTION }} >> .env
            echo CHAT_ID=${{ secrets.CHAT_ID }} >> .env
            echo TOKEN=${{ secrets.TOKEN }} >> .env
            sudo docker-compose -f docker-compose.yml stop
            sudo docker-compose -f docker-compose.yml rm -f web
            sudo docker rmi alexanderpronikov/t_web_app:latest
            sudo docker-compose -f docker-compose.yml up -d
            sudo docker-compose -f docker-compose.yml exec -T web python manage.py migrate
            sudo docker-compose -f docker-compose.yml exec -T web python manage.py collectstatic --no-input
